import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.9509352d.js";const p="/fe-core-book/images/158.png",o="/fe-core-book/images/159.png",e="/fe-core-book/images/160.png",r="/fe-core-book/images/161.png",c="/fe-core-book/images/162.png",t="/fe-core-book/images/163.png",E="/fe-core-book/images/164.png",B=JSON.parse('{"title":"离不开的网络基础","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/45.md","filePath":"guide/45.md","lastUpdated":1700204465000}'),y={name:"guide/45.md"},i=l('<h1 id="离不开的网络基础" tabindex="-1">离不开的网络基础 <a class="header-anchor" href="#离不开的网络基础" aria-label="Permalink to &quot;离不开的网络基础&quot;">​</a></h1><p>开启本讲之前，我想先问一句：“网络基础对于前端程序员重不重要”？其实答案是毫无疑问的，如果读者仍然对此有怀疑，那可能你还是刚入行的程序员，相信随着工作经验的增加，你会越来越能意识到网络基础的重要性。事实上，具备必要的网络基础，是对于一个程序员的要求，绝不仅仅是对前端工程师的要求，更何况在 Node.js 发展当下，学好网络知识更是对于前途发展意义重大。</p><p>网络基础其实并不难，但绝不仅仅是一讲的内容就能“融会贯通”的，系统性地学习还需要回炉到大学课本。本讲，我从网络基础概念和场景应用两大方面来讲解，主要内容如下：</p><p><img src="'+p+'" alt=""></p><h2 id="网络基础知识" tabindex="-1">网络基础知识 <a class="header-anchor" href="#网络基础知识" aria-label="Permalink to &quot;网络基础知识&quot;">​</a></h2><p>有一个说法——“大厂前端面试对 HTTP 的要求比 CSS 还要高”，确实从面试的频率上，以 HTTP 为核心的网络基础考察绝对是重点。这些考察点其实并不难，都是基础概念，我们先从几个高频考点入手。</p><p>更为基础的内容，比如计算机网络体系结构，OSI 七层协议等我们不再提及，必要知识需要读者先行了解</p><h3 id="tcp-和-udp" tabindex="-1">TCP 和 UDP <a class="header-anchor" href="#tcp-和-udp" aria-label="Permalink to &quot;TCP 和 UDP&quot;">​</a></h3><p>TCP 和 UDP 是运输层的两种协议，什么是运输层呢？</p><blockquote><p>运输层（Transport Layer）就是负责向两台主机进程之间的通信提供通用的数据传输服务，应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。</p></blockquote><p>对于 TCP 和 UDP 这两种协议的理解，我们可以主要从其特点和区别来掌握。</p><p>传输控制协议 TCP（Transmisson Control Protocol）是一种 面向连接的、可靠的 数据传输服务。如何理解可靠呢？通过 TCP 协议传送数据可以无差错、不丢失、不重复、并且按序到达；如何理解面向连接呢？就像我们打电话一样，通过拿起电话和挂掉电话来表示连接的建立和中断。此外，TCP 的特点有：</p><ul><li>TCP 提供全双工通信，也就是说双方在连接建立之后，都可以在任何时候进行数据发送</li><li>TCP 两端连接都设有缓存，在发送和接收时都可以利用缓存临时存放数据</li><li>TCP 是面向字节流的</li></ul><p>用户数据协议 UDP（User Datagram Protocol）是一种 无连接的、不保证数据传输的可靠性 的运输层协议。其特点：</p><ul><li>UDP 无连接</li><li>UDP 不保证可靠性，因此不需要维持复杂的链接状态</li><li>UDP 是面向报文的</li><li>UDP 没有拥塞控制</li><li>UDP 支持一对一、一对多、多对一和多对多的交互通信</li></ul><p>因此根据 TCP 和 UDP 的特点，可以选择不同的协议进行场景应用，比如对于直播、实时视频会议，你认为哪种协议更加适合呢？</p><p>因为 UDP 传输速度更快、效率更高，UDP 没有拥塞控制，所以网络出现拥塞不会使源主机的发送速率降低，且直播、实时视频会议丢失一两帧内容对于应用并没有体验性的影响，因此，UDP 对于直播、实时视频会议的场景会更加适合。</p><p>这些内容对应的面试考点：</p><ul><li>比较 TCP 和 UDP</li><li>TCP 和 UDP 的应用场景</li><li>TCP 如何保证传输的可靠性</li></ul><p>前两项考点我们已经有所涉及，现在针对 TCP 如何保证传输的可靠性进行展开。TCP 保证传输的可靠性主要手段有以下几个。 数据包校验：如果接收端校验出包有错，则进行丢弃且不进行相应。</p><ul><li>对失序数据包重排序：TCP 协议会对失序数据包进行排序，然后再交给应用层。</li><li>丢弃重复数据。</li><li>应答机制：当接收端接收到数据之后，将发送确认信息。</li><li>超时重发：当发送端发出数据后，它启动一个定时器，如果超出计时器的时限，将重发这个报文段。</li><li>流量控制：前面提到过，TCP 连接的每一方都有固定大小的缓冲空间，可防止接收端缓冲区溢出，这就是流量控制。TCP 使用可变大小的滑动窗口协议来进行流量控制。</li></ul><p>最后再补充一点单工/半双工/双工数据通信的概念区分：</p><ul><li>单工数据传输是数据只能在一个方向上传输；</li><li>半双工数据传输允许数据在两个方向上传输，但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信；</li><li>全双工数据通信允许数据同时在两个方向上传输，因此，全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都有独立的接收和发送能力。</li></ul><h3 id="三次握手和四次挥手" tabindex="-1">三次握手和四次挥手 <a class="header-anchor" href="#三次握手和四次挥手" aria-label="Permalink to &quot;三次握手和四次挥手&quot;">​</a></h3><p>上面我们说到 TCP 是面向连接的，那么这个连接过程就涉及到著名的三次握手和四次挥手了。也许对于这些名词我们已经“听烂了”，但是你是否有真正的掌握呢？</p><p>三次握手，简单来说是指当建立一个 TCP 连接时，整个建立过程需要客户端和服务端一共交互三个包，三次握手的目的是连接服务器的指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号并交换 TCP 窗口大小信息。</p><p><img src="'+o+'" alt=""></p><p>具体来说 第一次握手</p><p>开始建立连接时，客户端向服务器发出连接请求报文，报文首部中的同部位 SYN = 1，同时选择一个初始序列号 seq = x ，这时客户端进程进入了 SYN- SENT （同步已发送状态）状态，等待服务器确认。</p><p>第二次握手</p><p>服务器收到 syn 包后，如果同意连接，则发出确认报文；确认报文 ACK = 1，SYN = 1，确认号是 ack = x + 1，同时也要为自己初始化一个序列号 seq = y，此时服务器进程进入了 SYN-RCVD（同步收到）状态。</p><p>第三次握手</p><p>客户端收到服务器的 SYN + ACK 包，要向服务器给出确认。确认报文的 ACK = 1，ack = y + 1，自己的序列号 seq = x + 1。此时，TCP 连接建立，客户端进入 ESTABLISHED （已建立连接）状态。</p><p>四次挥手是指，TCP 连接的终端需要客户端和服务端总共发送四个包，客户端或者服务器端均可主动发起挥手动作。</p><p><img src="'+e+`" alt=""></p><p>具体来说， 第一次挥手</p><p>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部 FIN = 1，其序列号为 seq = u（等于前面已经传送过来的数据最后一个字节的序号加 1）。此时，客户端进入 FIN-WAIT-1（终止等待 1）状态。</p><p>第二次挥手</p><p>服务器收到连接释放报文，发出确认报文，ACK = 1，ack = u + 1，并且带上自己的序列号 seq = v（客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受），此时，服务端就进入了 CLOSE-WAIT（关闭等待）状态。</p><p>第三次挥手</p><p>服务器将最后的数据发送完毕后，就向客户端发送连接中断报文，FIN = 1，ack = u + 1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为 seq = w，此时，服务器就进入了 LAST- ACK（最后确认）状态，等待客户端的确认。</p><p>第四次挥手</p><p>客户端收到服务器的连接释放报文后，必须发出确认，ACK = 1，ack = w + 1，而自己的序列号是 seq = u + 1。此时，客户端就进入了 TIME-WAIT（时间等待）状态。</p><p>服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接（注意此时 TCP 连接还没有释放，必须经过 2MSL（最长报文段寿命）的时间后，当客户端撤销相应的 TCB 后，才进入 CLOSED 状态）。服务器只要收到了客户端发出的确认，立即进入 CLOSED 状态。同样，撤销 TCB 后，就结束了这次的 TCP 连接。</p><p>这些内容对应的面试考点：</p><ul><li>三次握手和四次挥手过程</li><li>三次握手和四次挥手的必要性，不做行不行？</li></ul><h3 id="http-响应常见状态码" tabindex="-1">HTTP 响应常见状态码 <a class="header-anchor" href="#http-响应常见状态码" aria-label="Permalink to &quot;HTTP 响应常见状态码&quot;">​</a></h3><p>HTTP 响应常见状态码这里只做一个速查总结。</p><ul><li>100-199：表示成功接收请求, 要求客户端继续提交下一次请求才能完成整个处理过程，常见的有 101（客户要求服务器转换 HTTP 协议版本）、100（客户必须继续发出请求）</li><li>200-299：表示成果接收请求并已完成整个处理过程</li><li>300-399：需要客户进一步细化需求，以进一步完成请求，常用的有 301（永久重定向）、302（临时重定向）、304（缓存相关）</li><li>400-499：请求出错，包含语法错误或者无法正确执行逻辑，常用的有 404（无对应资源）、401（权限问题）、403 （服务器拒绝请求）</li><li>500-599：服务器端程序处理出现错误，常见的有 502（错误网关）、504（网关超时）、505（HTTP 版本不受支持）</li></ul><p>列举更加具体的状态码说明，出自：<a href="https://juejin.im/entry/586b5b7dac502e12d62b4f33" target="_blank" rel="noreferrer">HTTP Status Code</a></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//继续 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分</span></span>
<span class="line"><span style="color:#79B8FF;">101</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//切换协议  请求者已要求服务器切换协议，服务器已确认并准备切换</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//成功  服务器已经成功处理了请求，通常，这表示服务器提供了请求的网页</span></span>
<span class="line"><span style="color:#79B8FF;">201</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//已创建  请求成功并且服务器创建了新的资源</span></span>
<span class="line"><span style="color:#79B8FF;">202</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//已接受  服务器已接受请求，但尚未处理</span></span>
<span class="line"><span style="color:#79B8FF;">203</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//非授权信息  服务器已经成功处理了请求，但返回的信息可能来自另一来源</span></span>
<span class="line"><span style="color:#79B8FF;">204</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//无内容  服务器成功处理了请求，但没有返回任何内容</span></span>
<span class="line"><span style="color:#79B8FF;">205</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//重置内容  服务器成功处理了请求，但没有返回任何内容</span></span>
<span class="line"><span style="color:#79B8FF;">206</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//部分内容  服务器成功处理了部分 GET 请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//多种选择  针对请求，服务器可执行多种操作。服务器可根据请求者（user agent）选择一项操作，或提供操作列表供请求者选择</span></span>
<span class="line"><span style="color:#79B8FF;">301</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//永久移动  请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</span></span>
<span class="line"><span style="color:#79B8FF;">302</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//临时移动  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</span></span>
<span class="line"><span style="color:#79B8FF;">303</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//查看其他位置  请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</span></span>
<span class="line"><span style="color:#79B8FF;">304</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//未修改  自动上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容</span></span>
<span class="line"><span style="color:#79B8FF;">305</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//使用代理  请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理</span></span>
<span class="line"><span style="color:#79B8FF;">307</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//临时性重定向  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">400</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//错误请求  服务器不理解请求的语法</span></span>
<span class="line"><span style="color:#79B8FF;">401</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//未授权  请求要求身份验证。对于需要登录的网页，服务器可能返回此响应</span></span>
<span class="line"><span style="color:#79B8FF;">403</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//禁止  服务器拒绝请求</span></span>
<span class="line"><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//未找到  服务器找不到请求的网页</span></span>
<span class="line"><span style="color:#79B8FF;">405</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//方法禁用  禁用请求中指定的方法</span></span>
<span class="line"><span style="color:#79B8FF;">406</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//不接受  无法使用请求的内容特性响应请求的网页</span></span>
<span class="line"><span style="color:#79B8FF;">407</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//需要代理授权  此状态码与401（未授权）类似，但指定请求者应当授权使用代理</span></span>
<span class="line"><span style="color:#79B8FF;">408</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//请求超时  服务器等候请求时发生超时</span></span>
<span class="line"><span style="color:#79B8FF;">409</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//冲突  服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息</span></span>
<span class="line"><span style="color:#79B8FF;">410</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//已删除  如果请求的资源已永久删除，服务器就会返回此响应</span></span>
<span class="line"><span style="color:#79B8FF;">411</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//需要有效长度  服务器不接受不含有效内容长度标头字段的请求</span></span>
<span class="line"><span style="color:#79B8FF;">412</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//未满足前提条件  服务器未满足请求者在请求者设置的其中一个前提条件</span></span>
<span class="line"><span style="color:#79B8FF;">413</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//请求实体过大  服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力</span></span>
<span class="line"><span style="color:#79B8FF;">414</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//请求的URI过长  请求的URI（通常为网址）过长，服务器无法处理</span></span>
<span class="line"><span style="color:#79B8FF;">415</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//不支持媒体类型  请求的格式不受请求页面的支持</span></span>
<span class="line"><span style="color:#79B8FF;">416</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//请求范围不符合要求  如果页面无法提供请求的范围，则服务器会返回此状态码</span></span>
<span class="line"><span style="color:#79B8FF;">417</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//未满足期望值  服务器未满足“期望”请求标头字段的要求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//服务器内部错误  服务器遇到错误，无法完成请求</span></span>
<span class="line"><span style="color:#79B8FF;">501</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//尚未实施  服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码</span></span>
<span class="line"><span style="color:#79B8FF;">502</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//错误网关  服务器作为网关或代理，从上游服务器无法收到无效响应</span></span>
<span class="line"><span style="color:#79B8FF;">503</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//服务器不可用  服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态</span></span>
<span class="line"><span style="color:#79B8FF;">504</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//网关超时  服务器作为网关代理，但是没有及时从上游服务器收到请求</span></span>
<span class="line"><span style="color:#79B8FF;">505</span><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">//HTTP 版本不受支持  服务器不支持请求中所用的 HTTP 协议版本</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">100</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//继续 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分</span></span>
<span class="line"><span style="color:#005CC5;">101</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//切换协议  请求者已要求服务器切换协议，服务器已确认并准备切换</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">200</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//成功  服务器已经成功处理了请求，通常，这表示服务器提供了请求的网页</span></span>
<span class="line"><span style="color:#005CC5;">201</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//已创建  请求成功并且服务器创建了新的资源</span></span>
<span class="line"><span style="color:#005CC5;">202</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//已接受  服务器已接受请求，但尚未处理</span></span>
<span class="line"><span style="color:#005CC5;">203</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//非授权信息  服务器已经成功处理了请求，但返回的信息可能来自另一来源</span></span>
<span class="line"><span style="color:#005CC5;">204</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//无内容  服务器成功处理了请求，但没有返回任何内容</span></span>
<span class="line"><span style="color:#005CC5;">205</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//重置内容  服务器成功处理了请求，但没有返回任何内容</span></span>
<span class="line"><span style="color:#005CC5;">206</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//部分内容  服务器成功处理了部分 GET 请求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">300</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//多种选择  针对请求，服务器可执行多种操作。服务器可根据请求者（user agent）选择一项操作，或提供操作列表供请求者选择</span></span>
<span class="line"><span style="color:#005CC5;">301</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//永久移动  请求的网页已永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置</span></span>
<span class="line"><span style="color:#005CC5;">302</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//临时移动  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</span></span>
<span class="line"><span style="color:#005CC5;">303</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//查看其他位置  请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码</span></span>
<span class="line"><span style="color:#005CC5;">304</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//未修改  自动上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容</span></span>
<span class="line"><span style="color:#005CC5;">305</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//使用代理  请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理</span></span>
<span class="line"><span style="color:#005CC5;">307</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//临时性重定向  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">400</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//错误请求  服务器不理解请求的语法</span></span>
<span class="line"><span style="color:#005CC5;">401</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//未授权  请求要求身份验证。对于需要登录的网页，服务器可能返回此响应</span></span>
<span class="line"><span style="color:#005CC5;">403</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//禁止  服务器拒绝请求</span></span>
<span class="line"><span style="color:#005CC5;">404</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//未找到  服务器找不到请求的网页</span></span>
<span class="line"><span style="color:#005CC5;">405</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//方法禁用  禁用请求中指定的方法</span></span>
<span class="line"><span style="color:#005CC5;">406</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//不接受  无法使用请求的内容特性响应请求的网页</span></span>
<span class="line"><span style="color:#005CC5;">407</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//需要代理授权  此状态码与401（未授权）类似，但指定请求者应当授权使用代理</span></span>
<span class="line"><span style="color:#005CC5;">408</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//请求超时  服务器等候请求时发生超时</span></span>
<span class="line"><span style="color:#005CC5;">409</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//冲突  服务器在完成请求时发生冲突。服务器必须在响应中包含有关冲突的信息</span></span>
<span class="line"><span style="color:#005CC5;">410</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//已删除  如果请求的资源已永久删除，服务器就会返回此响应</span></span>
<span class="line"><span style="color:#005CC5;">411</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//需要有效长度  服务器不接受不含有效内容长度标头字段的请求</span></span>
<span class="line"><span style="color:#005CC5;">412</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//未满足前提条件  服务器未满足请求者在请求者设置的其中一个前提条件</span></span>
<span class="line"><span style="color:#005CC5;">413</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//请求实体过大  服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力</span></span>
<span class="line"><span style="color:#005CC5;">414</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//请求的URI过长  请求的URI（通常为网址）过长，服务器无法处理</span></span>
<span class="line"><span style="color:#005CC5;">415</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//不支持媒体类型  请求的格式不受请求页面的支持</span></span>
<span class="line"><span style="color:#005CC5;">416</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//请求范围不符合要求  如果页面无法提供请求的范围，则服务器会返回此状态码</span></span>
<span class="line"><span style="color:#005CC5;">417</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//未满足期望值  服务器未满足“期望”请求标头字段的要求</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">500</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//服务器内部错误  服务器遇到错误，无法完成请求</span></span>
<span class="line"><span style="color:#005CC5;">501</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//尚未实施  服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码</span></span>
<span class="line"><span style="color:#005CC5;">502</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//错误网关  服务器作为网关或代理，从上游服务器无法收到无效响应</span></span>
<span class="line"><span style="color:#005CC5;">503</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//服务器不可用  服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态</span></span>
<span class="line"><span style="color:#005CC5;">504</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//网关超时  服务器作为网关代理，但是没有及时从上游服务器收到请求</span></span>
<span class="line"><span style="color:#005CC5;">505</span><span style="color:#24292E;">     </span><span style="color:#6A737D;">//HTTP 版本不受支持  服务器不支持请求中所用的 HTTP 协议版本</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>这些内容对应的面试考点：</p><ul><li>状态码的熟悉程度</li><li>缓存相关状态码</li><li>Restful 相关内容</li></ul><h3 id="http-请求方法" tabindex="-1">HTTP 请求方法 <a class="header-anchor" href="#http-请求方法" aria-label="Permalink to &quot;HTTP 请求方法&quot;">​</a></h3><p>常见的 HTTP 请求方法有以下几个。</p><ul><li>GET 方法：该方法发送请求来取得服务器上的资源，一般来说 GET 方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。</li><li>POST 方法：该方法向将指定资源的最新数据传送给服务器取代指定的资源的内容，POST 方法是非幂等的方法，因为这个请求可能会创建新的资源或 / 和修改现有资源。</li><li>PUT 方法：类似 POST 方法，该方法指定了资源在服务器上的位置，进行数据提交或数据更新</li><li>PARTCH 方法：该方法出现的较晚，它在 2010 年的 RFC 5789 标准中被定义。一般用于资源的部分更新，而 PUT 一般用于资源的整体更新。另外，当资源不存在时，PATCH 会创建一个新的资源，而 PUT 只会对已在资源进行更新。</li><li>HEAD 方法：该方法只请求页面的首部，也就是说服务端的返回不含内容部分。这个方法，允许我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD 方法常被用于客户端查看服务器的性能。</li><li>DELETE 方法：该方法删除服务器上的某资源或者数据。</li><li>OPTIONS 方法：该方法用于获取指定服务能够支持的方法。当请求成功时，客户端会得到相关头部信息，指定了服务能够支持的方法，比如“GET、POST”等。JavaScript 的 XMLHttpRequest 对象进行 CORS 跨域资源共享时，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。</li><li>TRACE 方法：被用于激发一个远程的，应用层的请求消息回路，该方法主要用于 HTTP 请求的测试或诊断。</li><li>CONNECT 方法：HTTP/1.1 协议预留的，能够将连接改为管道方式的代理服务器。通常用于 SSL 加密服务器的链接与非加密的 HTTP 代理服务器的通信。</li></ul><p>我们再从 HTTP 方法的安全性和幂等性角度来进行总结：</p><ul><li>安全性是说 多次调用不会产生副作用 ，换句话说， 安全的方法不会修改资源状态；</li><li>幂等性，是指该方法 多次调用返回的效果（形式）一致 ，客户端可以重复调用并且期望同样的结果。</li></ul><p><img src="`+r+'" alt=""></p><p>这些内容对应的面试考点：</p><ul><li>GET/POST 区别</li><li>OPTIONS 理解，以及跨域相关内容</li><li>Restful 相关内容</li></ul><h3 id="如何理解-http-协议是无状态的" tabindex="-1">如何理解 HTTP 协议是无状态的 <a class="header-anchor" href="#如何理解-http-协议是无状态的" aria-label="Permalink to &quot;如何理解 HTTP 协议是无状态的&quot;">​</a></h3><p>综合以上内容，我们来分析一个面试常考题目：如何理解 HTTP 协议是无状态的？</p><p>我们之所以说 HTTP 协议是无状态的，其实指的是客户端和服务器的通信，每个请求之间是独立的，指的是 HTTP 协议对于独立的请求是没有记忆能力的。</p><p>通俗点说，我们的应用发送一个请求，和下一次再打开该应用，发送同一个请求，这些请求之间没有任何联系。 HTTP 是一个无状态的面向连接的协议 ，但是无状态不代表 HTTP 不能保持 TCP 连接，更不能代表 TCP 不是面向连接的。</p><h3 id="其他概念" tabindex="-1">其他概念 <a class="header-anchor" href="#其他概念" aria-label="Permalink to &quot;其他概念&quot;">​</a></h3><p>这一讲不再做更多 HTTP 内容的介绍，更多 HTTP 的知识会在《HTTP 的深思：我从何而来，去向何处》中继续说明。我们来看一些更多的概念。</p><h3 id="域名系统" tabindex="-1">域名系统 <a class="header-anchor" href="#域名系统" aria-label="Permalink to &quot;域名系统&quot;">​</a></h3><p>域名系统（Domain Name System，DNS）是因特网的一项核心服务，它作为可以将域名和 IP 地址相互映射的一个分布式数据库，能够使人更方便地访问互联网，而不用去记住能够被机器直接读取的 IP 数串。</p><p>比如我们经常访问的网站，其域名就相当于其门牌地址，比如 IBM 公司的域名是 www.ibm.com；Cisco 公司的域名是 www.cisco.com。因此对每一个网站进行访问时，都需要对域名和对应的 IP 地址进行映射，具体过程：</p><ul><li>先过浏览器搜索自己的 DNS 缓存（可以使用 chrome://net-internals/#dns 来进行查看）</li><li>上一步未找到对应缓存的 IP 地址时，搜索操作系统中的 DNS 缓存</li><li>上一步未找到对应缓存的 IP 地址时，操作系统将域名发送至 LDNS（本地区域名服务器），LDNS 查询 自己的 DNS 缓存（一般查找成功率在 80% 左右），查找成功则返回结果，失败则发起一个迭代 DNS 解析请求，为什么说这是迭代的 DNS 解析请求呢？这个过程 <ul><li>LDNS 向 Root Name Server（根域名服务器，如 com、net、org 等解析顶级域名服务器的地址）发起请求，此处，Root Name Server 返回 com 域的顶级域名服务器地址</li><li>LDNS 向 com 域的顶级域名服务器发起请求，返回 baidu.com 域名服务器地址</li><li>LDNS 向 baidu.com 域名服务器发起请求，得到 www.baidu.com 的 IP 地址 LDNS 将得到的 IP 地址返回给操作系统，同时自己也将 IP 地址缓存起来</li></ul></li><li>操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来</li></ul><p>DNS 解析整个过程，分为：递归查询过程和迭代查询过程。</p><p>读者可以通过：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">cat </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">etc</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">resolv.conf</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">cat </span><span style="color:#D73A49;">/</span><span style="color:#24292E;">etc</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">resolv.conf</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获取本机 DNS 配置，我的内容为：</p><p><img src="'+c+'" alt=""></p><p>再通过：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">dig </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">trace </span><span style="color:#79B8FF;">XXX</span><span style="color:#E1E4E8;">.com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">dig </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">trace </span><span style="color:#005CC5;">XXX</span><span style="color:#24292E;">.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>来查看完整的分级查询过程：</p><p><img src="'+t+`" alt=""></p><p>这些内容对应的面试考点：</p><ul><li>域名系统相关工作方式</li><li>顶级域名、一级域名、二级域名概念</li></ul><p>最后，需要说明的是 DNS 使用无连接的 UDP 协议来进行查询，这样的方式降低了开销，也使得速度更快，保证了高效的通信，但是没有太考虑安全问题。它使用目的端口为 53 的 UDP 明文进行通信，这也带来了诸如 DNS 欺骗、DNS Cache 污染、DNS 放大攻击等问题，一些“黑心”运营商就可以利用这一点达到一些别用用心的目的。</p><p>针对于此，DNSSec（Domain Name System Security Extensions，也叫「DNS安全扩展」）机制便诞生了，这个机制会让客户端对域名来源身份进行验证，并且检查来自 DNS 域名服务器应答记录的完整性，以及验证是否在传输过程中被篡改过。总之域名系统的安全性话题已经不可忽视。</p><h3 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h3><p>跨域其实是浏览器的行为，狭义上说，它指的是浏览器无法执行其他网站的脚本。为什么无法执行呢？这要由浏览器的同源策略说起，简单来说，跨域是浏览器对 JavaScript 施加的安全限制。</p><p>同源策略（Same Origin Policy）是一种约定，由 Netscape 公司 1995 年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。</p><p>我们都知道，所谓同源，是指“协议、域名、端口”这三要素都相同，在非同源的情况下，以下行为会收到限制：</p><ul><li>对 Cookie、LocalStorage 和 IndexDB 的读取</li><li>对 DOM 和 JS 对象的读取</li><li>Ajax 请求的正常执行</li></ul><p>关于解决跨越方案的内容市面上的资料讲解较多，我们这里不再赘述。</p><h4 id="代理和网关" tabindex="-1">代理和网关 <a class="header-anchor" href="#代理和网关" aria-label="Permalink to &quot;代理和网关&quot;">​</a></h4><p>在 NodeJS “攻城略地”的背景下，前端开发者越来越多地接触到了代理和网关的概念。代理简单来说，是一种有转发功能的应用程序，它扮演了位于两端之间“中间人”的角色。比如在我的一个项目中，公司内部中台有基于 StatsD（StatsD 就是一个简单的网络守护进程，基于 Node.js 平台，通过 UDP 或者 TCP 方式侦听各种统计信息）的数据收集和统计系统，因为 StatsD 是基于 TCP/UDP 的，因此为了在 C 端统计用户行为，我设计了在 NodeJS 层的一个代理机制，对 C 端上报数据进行简单的接受和分发。</p><p>网关是转发其他服务器通信数据的服务器，当接收从客户端发送来的请求时，它就像自己拥有资源的源服务器一样对请求进行处理，其工作机制和代理类似，但网关能力可能更加强大，它不是提供一个单一服务，而是能给通信链路提供平台化的服务，比如鉴权等内容。</p><p>更多应用我们暂不展开，本讲会把更多精力放在网络基础知识的学习上。这里只需要读者明白，前端 BFF 层，或代理层，越来越需要开发者对于网络基础知识的理解和运用。</p><h4 id="uri-vs-url" tabindex="-1">URI VS URL <a class="header-anchor" href="#uri-vs-url" aria-label="Permalink to &quot;URI VS URL&quot;">​</a></h4><p>很多开发者并不理解 URI 和 URL 的区别，从名称上来看：</p><ul><li>URL，统一资源定位符</li><li>URI，统一资源标识符</li></ul><p>通俗来说，URL 像是一个邮政编码，URI 就是收件地址。因此可知，URL 的范围大于 URI。我们以淘宝的例子来说，<a href="https://www.taobao.com/" target="_blank" rel="noreferrer">https://www.taobao.com/</a> 这个域名就是 URL，而每个商品的地址就是一个 URI。</p><p>很多 Ajax 请求库的参数都设计成叫做 url，表示请求地址。但实际上，更准确的表达是 URI。</p><h2 id="网络相关应用" tabindex="-1">网络相关应用 <a class="header-anchor" href="#网络相关应用" aria-label="Permalink to &quot;网络相关应用&quot;">​</a></h2><p>这部分我们来看一些网络知识的应用，同时剖析一些案例。</p><h3 id="nodejs-和-tcp" tabindex="-1">NodeJS 和 TCP <a class="header-anchor" href="#nodejs-和-tcp" aria-label="Permalink to &quot;NodeJS 和 TCP&quot;">​</a></h3><p>在 NodeJS 中，我们可以很轻松地实现一个基于 TCP 的数据通信过程，主要依赖 net 模块：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> net </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;net&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;客户端已经链接&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(socket.</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;8080&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 获取地址信息，得到的是一个json { address: &#39;::&#39;, family: &#39;IPv6&#39;, port: 8000 } */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* TCP 服务器监听的地址 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`the port of server is \${</span><span style="color:#E1E4E8;">address</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">port</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* IPv6 还是 IPv4 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`the family of server is \${</span><span style="color:#E1E4E8;">address</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">family</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">getConnections</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">count</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`已经链接 \${</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;">} 个用户\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">server.maxConnections </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> net </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;net&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> net.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;客户端已经链接&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(socket.</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;8080&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 获取地址信息，得到的是一个json { address: &#39;::&#39;, family: &#39;IPv6&#39;, port: 8000 } */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* TCP 服务器监听的地址 */</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`the port of server is \${</span><span style="color:#24292E;">address</span><span style="color:#032F62;">.</span><span style="color:#24292E;">port</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* IPv6 还是 IPv4 */</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`the family of server is \${</span><span style="color:#24292E;">address</span><span style="color:#032F62;">.</span><span style="color:#24292E;">family</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">getConnections</span><span style="color:#24292E;">((</span><span style="color:#E36209;">err</span><span style="color:#24292E;">,</span><span style="color:#E36209;">count</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`已经链接 \${</span><span style="color:#24292E;">count</span><span style="color:#032F62;">} 个用户\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">server.maxConnections </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>这样就使用 NodeJS 创建了一个简单的 TCP 服务器，并设置了最大连接数，监听客户端链接数量，以及对事件的处理等。</p><p>也可以利用 socket.write 进行 TCP 服务器的数据发送：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> net </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;net&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 创建 TCP 服务器 */</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> server </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> net.</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> address </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> server.</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`the server address is \${</span><span style="color:#79B8FF;">JSON</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">stringify</span><span style="color:#9ECBFF;">(</span><span style="color:#E1E4E8;">address</span><span style="color:#9ECBFF;">)</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    socket.</span><span style="color:#B392F0;">write</span><span style="color:#E1E4E8;">(message, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> writeSize </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> socket.bytesWritten</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">message</span><span style="color:#9ECBFF;">} has send, the size is \${</span><span style="color:#E1E4E8;">writeSize</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">readSize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> socket.bytesRead</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`the size of data is \${</span><span style="color:#E1E4E8;">readSize</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">server.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8000</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Creat server on http://127.0.0.1:8000/&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> net </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;net&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 创建 TCP 服务器 */</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> server </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> net.</span><span style="color:#6F42C1;">createServer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">socket</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> address </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> server.</span><span style="color:#6F42C1;">address</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> message </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`the server address is \${</span><span style="color:#005CC5;">JSON</span><span style="color:#032F62;">.</span><span style="color:#6F42C1;">stringify</span><span style="color:#032F62;">(</span><span style="color:#24292E;">address</span><span style="color:#032F62;">)</span><span style="color:#032F62;">}\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    socket.</span><span style="color:#6F42C1;">write</span><span style="color:#24292E;">(message, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> writeSize </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.bytesWritten</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">message</span><span style="color:#032F62;">} has send, the size is \${</span><span style="color:#24292E;">writeSize</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    socket.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;data&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">data</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">readSize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> socket.bytesRead</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`the size of data is \${</span><span style="color:#24292E;">readSize</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">server.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">8000</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Creat server on http://127.0.0.1:8000/&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>我们也可以用 NodeJS 来构建一个 TCP 客户端，实现 TCP 客户端和 TCP 服务器的通信，这里就不再展开了。</p><h3 id="nodejs-和-udp" tabindex="-1">NodeJS 和 UDP <a class="header-anchor" href="#nodejs-和-udp" aria-label="Permalink to &quot;NodeJS 和 UDP&quot;">​</a></h3><p>关于 NodeJS 实现 UDP 通信，我们需要依靠 dgram 模块，dgram 模块提供了 UDP 数据包 socket 的实现。先看 UDP server 的创建，创建 server.js 文件：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dgram</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dgram&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建 UDP server</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> udpServer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dgram.</span><span style="color:#B392F0;">createSocket</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;udp4&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 绑定端口</span></span>
<span class="line"><span style="color:#E1E4E8;">udpServer.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5678</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听端口</span></span>
<span class="line"><span style="color:#E1E4E8;">udpServer.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;listening&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;udp server linstening 5678.&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//接收消息</span></span>
<span class="line"><span style="color:#E1E4E8;">udpServer.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">rinfo</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">messageStr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> message.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    udpServer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(messageStr.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, messageStr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">, rinfo.port, rinfo.address)</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`udp server received data: \${</span><span style="color:#E1E4E8;">messageStr</span><span style="color:#9ECBFF;">} from \${</span><span style="color:#E1E4E8;">rinfo</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">address</span><span style="color:#9ECBFF;">}:\${</span><span style="color:#E1E4E8;">rinfo</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">port</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//错误处理</span></span>
<span class="line"><span style="color:#E1E4E8;">udpServer.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;some error on udp server.&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    udpServer.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dgram</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dgram&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建 UDP server</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> udpServer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dgram.</span><span style="color:#6F42C1;">createSocket</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;udp4&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 绑定端口</span></span>
<span class="line"><span style="color:#24292E;">udpServer.</span><span style="color:#6F42C1;">bind</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5678</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 监听端口</span></span>
<span class="line"><span style="color:#24292E;">udpServer.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;listening&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;udp server linstening 5678.&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//接收消息</span></span>
<span class="line"><span style="color:#24292E;">udpServer.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">message</span><span style="color:#24292E;">, </span><span style="color:#E36209;">rinfo</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">messageStr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> message.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    udpServer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(messageStr.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, messageStr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">, rinfo.port, rinfo.address)</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`udp server received data: \${</span><span style="color:#24292E;">messageStr</span><span style="color:#032F62;">} from \${</span><span style="color:#24292E;">rinfo</span><span style="color:#032F62;">.</span><span style="color:#24292E;">address</span><span style="color:#032F62;">}:\${</span><span style="color:#24292E;">rinfo</span><span style="color:#032F62;">.</span><span style="color:#24292E;">port</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//错误处理</span></span>
<span class="line"><span style="color:#24292E;">udpServer.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">err</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;some error on udp server.&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    udpServer.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>创建 UDP Client，创建 client.js：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">dgram</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;dgram&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> udpClient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dgram.</span><span style="color:#B392F0;">createSocket</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;udp4&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">udpClient.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;close&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;udp client closed.&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 错误处理</span></span>
<span class="line"><span style="color:#E1E4E8;">udpClient.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;some error on udp client.&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 接收消息</span></span>
<span class="line"><span style="color:#E1E4E8;">udpClient.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">rinfo</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`receive message from \${</span><span style="color:#E1E4E8;">rinfo</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">address</span><span style="color:#9ECBFF;">}: \${</span><span style="color:#E1E4E8;">rinfo</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">port</span><span style="color:#9ECBFF;">}: \${</span><span style="color:#E1E4E8;">message</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定时向服务器发送消息</span></span>
<span class="line"><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sendStr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;hello.&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sendStrLen</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> sendStr.</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#E1E4E8;">    udpClient.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(sendStr, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, sendStrLen, </span><span style="color:#79B8FF;">5678</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;172.30.20.10&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">dgram</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;dgram&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> udpClient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dgram.</span><span style="color:#6F42C1;">createSocket</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;udp4&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">udpClient.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;close&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;udp client closed.&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 错误处理</span></span>
<span class="line"><span style="color:#24292E;">udpClient.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;error&#39;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;some error on udp client.&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 接收消息</span></span>
<span class="line"><span style="color:#24292E;">udpClient.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">message</span><span style="color:#24292E;">, </span><span style="color:#E36209;">rinfo</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`receive message from \${</span><span style="color:#24292E;">rinfo</span><span style="color:#032F62;">.</span><span style="color:#24292E;">address</span><span style="color:#032F62;">}: \${</span><span style="color:#24292E;">rinfo</span><span style="color:#032F62;">.</span><span style="color:#24292E;">port</span><span style="color:#032F62;">}: \${</span><span style="color:#24292E;">message</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定时向服务器发送消息</span></span>
<span class="line"><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sendStr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;hello.&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sendStrLen</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> sendStr.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#24292E;">    udpClient.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(sendStr, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, sendStrLen, </span><span style="color:#005CC5;">5678</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;172.30.20.10&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>在上述代码中，读者可以在 UDP Client 结尾处配置好自己的 IP 地址，并启动：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">node server.js</span></span>
<span class="line"><span style="color:#E1E4E8;">node client.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">node server.js</span></span>
<span class="line"><span style="color:#24292E;">node client.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>观察 NodeJS 应用状况。</p><h3 id="短网址功能实现" tabindex="-1">短网址功能实现 <a class="header-anchor" href="#短网址功能实现" aria-label="Permalink to &quot;短网址功能实现&quot;">​</a></h3><p>常用微博或者关注运营需求的读者应该知道短网址功能：</p><p><img src="`+E+`" alt=""></p><p>简单来说，短网址工具可以将一长串 URL 地址转换成简短的、可访问的短链接形式。自微博盛行以来，在微博字数有限的特色下，短链接盛行于微博网站，以节省微博字数，给博主发布更多文字的空间。</p><p>那么一个短网址生成平台该怎么设计呢？其实原理很简单：</p><ul><li>用户输入完整网址，服务端接收到完整网址之后，根据算法生成一个短码，维护完整网址和短码的映射关系，并将短码完善成短网址，返回给客户端；</li><li>任意客户端访问短网址，服务端根据完整网址和短码的映射关系，重定向到对应的页面。</li></ul><p>我们看到了熟悉的三个字：重定向，请读者思考这里的重定向应该对应哪个 HTTP 状态码呢？</p><p>我们应该在 302 和 301 中进行选择：从语义上看，短网址对应完整网址的映射关系和跳转关系不会发生变化，应该是 301 永久重定向才对。但是更多的短网址生成平台却采用了 302，这是为什么呢？</p><p>引自知乎网友的回答，<a href="https://www.zhihu.com/question/20103344/answer/573638467" target="_blank" rel="noreferrer">原文链接</a>。</p><blockquote><p>如果用了 301，Google、百度等搜索引擎，搜索的时候会直接展示真实地址，那我们就无法统计到短地址被点击的次数了，也无法收集用户的 Cookie、User Agent 等信息，这些信息可以用来做很多有意思的大数据分析，也是短网址服务商的主要盈利来源。</p></blockquote><p>完整的设计我们可以借助 MySQL 和 Redis 实现完整网址和短码之间的映射关系。生成短码的算法主要可以考虑以下几种：</p><ul><li>自增 id，然后将 id 值转换为 62 进制的字符串，为了解决短码长度不固定的问题，可以指定数字开始递增。同时为了解决短码有序的安全隐患，可以结合 md5 进行混淆。一种实现为：</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">string10to62</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">chars</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">charsArr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chars.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">radix</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> chars.</span><span style="color:#79B8FF;">length</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> qutient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">number</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> mod </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> qutient </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> radix</span></span>
<span class="line"><span style="color:#E1E4E8;">        qutient </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (qutient </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> mod) </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> radix</span></span>
<span class="line"><span style="color:#E1E4E8;">        arr.</span><span style="color:#B392F0;">unshift</span><span style="color:#E1E4E8;">(charsArr[mod])</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(qutient)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">string10to62</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">chars</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">charsArr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chars.</span><span style="color:#6F42C1;">split</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">radix</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> chars.</span><span style="color:#005CC5;">length</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> qutient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">number</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> mod </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> qutient </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> radix</span></span>
<span class="line"><span style="color:#24292E;">        qutient </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (qutient </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> mod) </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> radix</span></span>
<span class="line"><span style="color:#24292E;">        arr.</span><span style="color:#6F42C1;">unshift</span><span style="color:#24292E;">(charsArr[mod])</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(qutient)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li>哈希算法，直接输入任意长度的数据，输出固定长度的数据，这种算法比较典型，不再过多介绍</li><li>随机数：从 62 个字符串中随机取出固定长度的短码组合，然后去数据库中查询该短码是否已存在。如果已存在，就继续循环该方法重新获取短码，否则就直接返回。这种方法最为简单，但是得到碰撞的概率相对较大，一种实现为：</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">generateShortLink</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;4&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;5&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;6&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;7&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;8&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;9&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;d&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;e&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;f&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;g&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;h&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;i&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;j&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;k&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;l&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;m&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;n&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;o&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;p&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;q&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;r&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;s&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;t&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;u&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;v&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;w&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;y&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;z&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;B&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;C&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;D&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;E&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;F&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;G&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;H&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;I&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;J&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;K&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;L&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;M&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;N&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;O&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;P&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Q&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;R&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;S&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;T&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;U&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;V&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;W&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;X&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Y&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Z&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pos</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">round</span><span style="color:#E1E4E8;">(Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> (arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        str </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> arr[pos]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#B392F0;">getShortLink</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">shortLink</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">generateShortLink</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">searchResult</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">searchByLinkInMySQL</span><span style="color:#E1E4E8;">(shortLink)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (searchResult </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> searchResult.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getShortLink</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> shortLink</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">generateShortLink</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;3&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;4&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;5&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;6&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;7&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;8&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;9&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;c&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;d&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;e&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;f&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;g&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;h&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;i&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;j&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;k&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;l&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;m&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;n&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;o&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;p&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;q&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;r&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;s&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;t&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;u&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;v&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;w&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;x&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;y&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;z&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;B&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;C&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;D&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;E&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;F&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;G&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;H&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;I&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;J&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;K&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;L&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;M&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;N&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;O&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;P&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Q&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;R&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;S&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;T&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;U&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;V&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;W&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;X&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Y&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;Z&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pos</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">round</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> (arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        str </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> arr[pos]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">async </span><span style="color:#6F42C1;">getShortLink</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">shortLink</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">generateShortLink</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">searchResult</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">searchByLinkInMySQL</span><span style="color:#24292E;">(shortLink)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (searchResult </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> searchResult.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getShortLink</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> shortLink</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>这一部分应用的分析，参考了社区 <a href="https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fliucong1%2FshortLink" target="_blank" rel="noreferrer">shortLink</a> 的实现和分析内容。读者可进行进一步研究。</p><h3 id="扫码登录实现" tabindex="-1">扫码登录实现 <a class="header-anchor" href="#扫码登录实现" aria-label="Permalink to &quot;扫码登录实现&quot;">​</a></h3><p>另外一个我们要介绍的实现是扫码登录，现在授权第三方的扫码登录越来越流行。比如我们可以通过微信实现在第三方应用的登录、注册账号等，这种共用账号体系的能力究竟是如何实现的呢？</p><p>其实原理同样并不复杂：</p><ul><li>首先打开 PC 端页面，PC 端页面生成一个二维码，这个二维码带有服务端下发的一个唯一 id：uuid</li><li>接着，手机在微信账号中进行扫码，发送请求，请求包含了上面提到的 uuid 和当前用户的账号信息</li><li>与此同时，PC 端不断轮询服务器（或者通过 websocket，服务端主动 push 信息），获取扫码登录的状态</li><li>服务端返回扫码状态</li></ul><p>针对手机扫码后服务端的返回情况，我们进行梳理：</p><ul><li>PC 端在轮询时，如果扫码超时（手机没有授权登录或者就没扫码），服务端会阻塞一个时限（比如 30s），30s 内无响应，服务端返回状态码 408，得到返回后，前端继续轮询</li><li>大约 5 分钟内仍然没有扫码响应，则二维码失效，这时候服务端返回 400</li><li>如果手机端扫码成功，服务端返回 201 同时并返回用户信息，并等待用户点击“确认授权登录”</li><li>用户“确认授权登录”之后，服务端返回 200 同时返回一个 token；PC 端在拿到下响应后，重定向到目标页面，同时停止轮询</li></ul><p>关键理解点：</p><ul><li>扫码登录一共涉及到三端：服务端、PC 端和手机扫码端</li><li>PC 端通过轮询，不断向服务端获取用户扫码登录的状态</li><li>服务端阻塞 PC 端请求，这样可以减少 PC 端轮询的次数，优化轮询过程</li><li>服务端根据手机扫码状态，返回 408、400、201、200 等状态码</li></ul><h3 id="断点续传原理" tabindex="-1">断点续传原理 <a class="header-anchor" href="#断点续传原理" aria-label="Permalink to &quot;断点续传原理&quot;">​</a></h3><p>对于大文件的传输/下载，我们常常采用断点续传原理。想象一下在使用迅雷、网盘上传文件内容时，如果网络条件出现问题，我们仍然可以稍后继续进行上传/下载而不至于丢失之前的上传/下载进度。这种断点续传的能力究竟是如何实现的呢？</p><p>实现断点续传，需要依靠 HTTP1.1 协议（RFC2616），该协议版本开始支持获取文件的部分内容，这为并行下载以及断点续传提供了技术支持。</p><p>在前端发送请求时，需要在 Header 里加入 Range 参数，同时服务器端响应时返回带有 Content-Range 的 Header，也就是说 Range 和 Content-Range 是一对对应的 Header 头。</p><p>比如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Range</span><span style="color:#E1E4E8;">: bytes</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">500</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">999</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Range</span><span style="color:#24292E;">: bytes</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">500</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">999</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>就表示上传第 500-999 字节范围的内容，而浏览器在发出带 Range 的请求后，服务器会在 Content-Range 头部返回当前接受的范围和文件总大小，比如：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Content</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Range</span><span style="color:#E1E4E8;">: bytes </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">499</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">22400</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Content</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Range</span><span style="color:#24292E;">: bytes </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">499</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">22400</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>就指当前发送数据的范围是 0-499，22400 则是文件的总 size。</p><p>我们来看一个例子：</p><ul><li>浏览器下载一个 1024K 的文件，当前已经下载了 512K</li><li>这时候不幸网络故障，稍后浏览器请求续传，这时候带有 Range:bytes=512000 的 Header 头，表明本次需要续传的片段</li><li>服务端接收到断点续传的请求，从文件的 512K 位置开始传输，并返回 Header 头： Content-Range:bytes 512000-/1024000，注意这时候的 HTTP status code 是 206，而非 200，206 表示：206 Partial Content（使用断点续传方式）</li></ul><p>请读者思考一个问题，如果在网络故障期间，服务器端文件发生了变化，导致 512K 部分并不能对上之前的内容，这个怎么办呢？</p><p>这时候就需要一个标识文件唯一性的标识符。RFC2616 中规定可以使用 Last-Modified 顾名思义，这样就可以标识文件的最后修改时间，浏览器就可判断出续传文件时是否已经发生过改动。这种方式并不惟一，也可以通过名为 Etag 的 Header，直接表文件的唯一标记（类似文件的 MD5 值）。浏览器端请求时申明 If-None-Match 或者 If-Modified-Since 字段，帮助服务端判别文件变化，同时浏览器也可以采用 If-Range Header，该头部包含 ETag 头或者是 Last-Modfied 信息，同样可以帮助服务端进行内容校验。这时候，服务端在校验一致时返回 206 的续传回应校验不通过时，服务端则返回 200 回应，回应的内容为新的文件的全部数据。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本讲我们以面试为切入点，总结了网络基础知识的多个方面。其中一些知识比较基础，但根据我观察，很多面试者都会在这些基础内容上“折腰”。网络知识是一个系统性的知识体系，还需要每一个开发者认真学习。也许你有体会：“在大学里学习网络知识时，很多概念很难真正理解”，而工作后有一定实战经验了，但是“很多网络内容又缺少了理论的支持”。因此关于网络的学习，我认为一定要理论结合实践。这些计算机基础内容，是一个开发者真正进阶的基本功。</p>`,155),F=[i];function b(u,d,C,m,h,g){return n(),a("div",null,F)}const A=s(y,[["render",b]]);export{B as __pageData,A as default};
