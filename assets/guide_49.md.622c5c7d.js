import{_ as a,o as s,c as e,Q as n}from"./chunks/framework.9509352d.js";const l="/fe-core-book/images/179.png",o="/fe-core-book/images/180.png",p="/fe-core-book/images/181.png",r="/fe-core-book/images/182.png",t="/fe-core-book/images/183.png",i="/fe-core-book/images/184.png",_=JSON.parse('{"title":"不可忽视的前端安全 - 单页应用鉴权设计","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/49.md","filePath":"guide/49.md","lastUpdated":1700207306000}'),c={name:"guide/49.md"},h=n('<h1 id="不可忽视的前端安全-单页应用鉴权设计" tabindex="-1">不可忽视的前端安全 - 单页应用鉴权设计 <a class="header-anchor" href="#不可忽视的前端安全-单页应用鉴权设计" aria-label="Permalink to &quot;不可忽视的前端安全 - 单页应用鉴权设计&quot;">​</a></h1><p>安全是计算机科学永远无法忽视的话题。随着互联网的发展，安全问题越来越突出，也越来越重要：它是一个程序可用性、健壮性的基础。这个话题可大可小，大到系统的设计，小到一行代码的写法，都可能影响系统的安全。</p><p>毫不例外，安全与前端开发的结合也持续走热。不管是经验丰富的程序员，还是尚在打基础的学生，也许都对 HTTPS、XSS、CSRF 等前端相关的安全问题不陌生。然而，这其中每一个主题都可以非常深入，都能系统地做一节课。但是，我认为面面俱到、走马观花地梳理这些内容，讲解这些概念价值不大。毕竟，这方面知识都已经比较成熟，社区上资料很多。</p><p>本讲我想从一个大部分产品都要涉及的登录鉴权入手，结合单页面应用，从这个角度，管中窥豹，尽可能多地涉及一些常见的安全知识，帮助大家了解前端安全。</p><p>接下来，让我们从应用场景入手，从前后端交互切入，以单页面应用为基础，呈现“鉴权”这个安全领域重要话题的全貌，并尽力覆盖到 XSS 和 CSRF 等攻击手段以及最佳实践。</p><p>关于这个主题的知识点如下：</p><p><img src="'+l+'" alt=""></p><h2 id="单页应用鉴权简介" tabindex="-1">单页应用鉴权简介 <a class="header-anchor" href="#单页应用鉴权简介" aria-label="Permalink to &quot;单页应用鉴权简介&quot;">​</a></h2><p>首先，我们要分清单页应用鉴权与传统鉴权方式有所不同：</p><p>单页应用采用前后端分离的设计方式，路由由前端管理，前后端遵循一定规范（如 REST、GraphQL），通过 AJAX 进行通信。在这种情况下，用户对页面请求时，后端经常无法获取用户身份信息，更无法确定返回的数据。</p><p>同时一次鉴权完毕后，如何在单页应用的体验当中，保持这个鉴权状态也值得思考。一般来说，单页应用鉴权采用下面的步骤实现。</p><ul><li>Step 1：前端根据用户交互，发送数据请求之前，需要准备用户信息，同数据请求一起发给后端处理。</li><li>Step 2-1：后端按照约定好的规则，根据请求中带有的用户身份信息，进行验证。如果验证不通过，返回 403 或者 401 相关状态码或其他状态，以表示鉴权失败。</li><li>Step 2-2：如果鉴权成功，后端返回相关数据。</li><li>Step 3：前端根据数据渲染视图。</li></ul><p>基本结构非常简单清晰：</p><p><img src="'+o+`" alt=""></p><p>在这个结构背后，隐藏的技术方案和安全细节非常值得我们思考，请继续阅读，我们将剖析几个重要概念和安全实践。</p><h3 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h3><p>鉴权过程中，如果使用 HTTP 协议来传输敏感数据（用户昵称、用户密码、token……），那么很容易被中间人拦截获取。现代通信中，我们都使用 HTTPS 协议来对传输内容进行加密。关于 HTTPS 的应用及其原理，又是一个超级话题。这里由于内容的限制，不过多展开，给大家分享一下我收藏的关于 HTTPS 好的文章：</p><ul><li><a href="https://mp.weixin.qq.com/s/--KxUNzmBdKtOPBbovWCaA" target="_blank" rel="noreferrer">https 连接的前几毫秒发生了什么</a></li><li><a href="https://juejin.im/post/5c441073e51d455226654d60" target="_blank" rel="noreferrer">完全图解 HTTPS</a></li><li><a href="https://juejin.im/post/5b5f1289e51d4519601aeeda" target="_blank" rel="noreferrer">更安全的 Web 通信 HTTPS</a></li><li><a href="https://www.infoq.cn/article/a-cartoon-intro-to-dns-over-https" target="_blank" rel="noreferrer">图解基于 HTTPS 的 DNS</a></li><li><a href="https://juejin.im/post/5b0274ac6fb9a07aaa118f49?utm_medium=fe&amp;utm_source=weixinqun" target="_blank" rel="noreferrer">看图学 HTTPS</a></li><li><a href="https://juejin.im/post/5af3e002f265da0b7c074ada" target="_blank" rel="noreferrer">http 与 https 的区别我真的知道吗</a></li><li><a href="https://zhuanlan.zhihu.com/p/22142170" target="_blank" rel="noreferrer">深入揭秘 HTTPS 安全问题&amp;连接建立全过程</a></li><li><a href="http://support.upyun.com/hc/kb/article/1031843/" target="_blank" rel="noreferrer">HTTPS系列干货（一）：HTTPS 原理详解</a></li><li><a href="http://support.upyun.com/hc/kb/article/1031843/https://juejin.im/post/58a8f3295c497d005fbd58b1" target="_blank" rel="noreferrer">HTTPS 为什么更安全，先看这些</a></li></ul><h3 id="不要使用-url-query-传递敏感数据" tabindex="-1">不要使用 URL query 传递敏感数据 <a class="header-anchor" href="#不要使用-url-query-传递敏感数据" aria-label="Permalink to &quot;不要使用 URL query 传递敏感数据&quot;">​</a></h3><p>URL query 会通过服务端日志、浏览器日志、浏览器历史记录查到。不要使用 URL query 传递敏感数据，这当然是最基本的准则之一。如果敏感数据在 URL query 中，这就给了恶意用户轻松获取数据的机会。同时，URL query 的长度也有限制，这也是其传递数据的弊端之一。</p><h3 id="防止暴力攻击的手段" tabindex="-1">防止暴力攻击的手段 <a class="header-anchor" href="#防止暴力攻击的手段" aria-label="Permalink to &quot;防止暴力攻击的手段&quot;">​</a></h3><p>攻击者可以通过暴力手段，尝试攻破用户的密码等信息。因此后端服务要时刻注意加入频率限制，限制一个用户短时间尝试密码的次数；也可以限制可疑用户（比如触发了过多服务端错误用户）的访问。另外，需要注意的是不要给任何人暴露服务端的技术细节信息，比如要记得关闭 X-Powered-By（服务器响应头隐藏）；Node 端在使用 express.js 的情况下，强烈建议使用 <a href="https://expressjs.com/en/advanced/best-practice-security.html#use-%20helmet" target="_blank" rel="noreferrer">Helmetjs</a>。</p><p>Helmet 帮助 Node.js 开发者通过设置合理的 HTTP header，预防一些常见的 Web 漏洞，比如上面提到的关闭 X-Powered- By。实际上它就是一组灵活的中间件函数，增强以下 HTTP header 的安全性：</p><ul><li>Content-Security-Policy 响应头，它可以设置应用是否可以引用某些来源内容，进而防止 XSS</li><li>关闭 X-Powered-By 响应头，以避免暴露服务端信息</li><li>增加 <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Public_Key_Pinning" target="_blank" rel="noreferrer">Public Key Pinning</a> 响应头，预防中间人伪造证书</li><li>设置 Strict-Transport-Security 响应头，这样浏览器只能通过 HTTPS 访问当前资源</li><li>为 IE8+ 设置 X-Download-Options 响应头，目前只有 IE8+ 支持这个 header，用来预防下载内容的安全隐患</li><li>设置 Cache-Control 和 Pragma header 以关闭浏览器端缓存</li><li>设置 X-Content-Type-Options 响应头，以禁用浏览器内容嗅探</li><li>设置 X-Frame-Options 响应头，以预防 clickjacking，这个响应头给浏览器指示是否允许在 <code>&lt;frame&gt;</code> 或者 <code>&lt;iframe&gt;</code> 标签中渲染某个页面</li><li>设置 X-XSS-Protection 响应头，当检测到跨站脚本攻击（XSS）时，浏览器停止加载页面</li></ul><p>它的使用非常简单：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">express</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">helmet</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;helmet&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">helmet</span><span style="color:#E1E4E8;">())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">express</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;express&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">helmet</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;helmet&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">helmet</span><span style="color:#24292E;">())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>其源码是典型的 express 中间件写法，它依次加载相关中间件集。比如它将引用 X-Powered-By 中间件，这个中间件的源码非常简单：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hidePoweredBy</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> setTo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (options </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {}).setTo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (setTo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hidePoweredBy</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;X-Powered-By&#39;</span><span style="color:#E1E4E8;">, setTo)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hidePoweredBy</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">removeHeader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;X-Powered-By&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hidePoweredBy</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> setTo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (options </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {}).setTo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (setTo) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hidePoweredBy</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">setHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;X-Powered-By&#39;</span><span style="color:#24292E;">, setTo)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hidePoweredBy</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">, </span><span style="color:#E36209;">res</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">removeHeader</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;X-Powered-By&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>通过 setHeader 和 removeHeader 方法，完成对 X-Powered-By 响应头的添加和删除。</p><h3 id="升级依赖保证安全" tabindex="-1">升级依赖保证安全 <a class="header-anchor" href="#升级依赖保证安全" aria-label="Permalink to &quot;升级依赖保证安全&quot;">​</a></h3><p>现如今我们的应用，大部分脚本都来自第三方依赖，第三方库出现安全隐患的新闻已经屡见不鲜。除了从源头把控依赖的引入外，适时合理地更新 npm 包，是值得倡导的做法，npm 便在 6.0 后有相关命令如下</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># npm 6.0 新增，扫描所有依赖，列出依赖中有安全隐患的包</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">audit</span></span>
<span class="line"><span style="color:#6A737D;"># npm 6.0 新增，扫描所有依赖，并把不安全的依赖包升级到可兼容的版本</span></span>
<span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">audit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">fix</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># npm 6.0 新增，扫描所有依赖，列出依赖中有安全隐患的包</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">audit</span></span>
<span class="line"><span style="color:#6A737D;"># npm 6.0 新增，扫描所有依赖，并把不安全的依赖包升级到可兼容的版本</span></span>
<span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">audit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">fix</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="单页应用鉴权实战" tabindex="-1">单页应用鉴权实战 <a class="header-anchor" href="#单页应用鉴权实战" aria-label="Permalink to &quot;单页应用鉴权实战&quot;">​</a></h2><p>言归正传，我们来看一下实现单页应用鉴权的两种主要手段：</p><ul><li>JWT</li><li>Authentication cookie</li></ul><p>这两种方式不尽相同，我们将逐一分析，并尝试合并这两种方案的优点，将它们结合为第三种方式。</p><h3 id="采用-jwt-实现鉴权" tabindex="-1">采用 JWT 实现鉴权 <a class="header-anchor" href="#采用-jwt-实现鉴权" aria-label="Permalink to &quot;采用 JWT 实现鉴权&quot;">​</a></h3><p>在鉴权过程中，为了验证用户的身份，需要浏览器向服务器端提供一个验证信息，我们称为 token。这个 token 通常由 JSON 数据格式组成，通过 hash 散列算法生成一个字符串，称为 JSON Web Token（JSON 表示令牌的原始类型为 JSON 格式，Web 表示在互联网中进行传播，Token 表示令牌，简称 JWT）。任何 token 持有者都可以无差别地用它来访问相关的资源。</p><p>我们可以在 HTTP Authorization header 中找到 token，其实就是一个字符串值。这个字符串用来表示用户的身份信息，进行身份认证或者从服务器获取合法资源。当然这个 token 往往是被加密的。那么这个 token 具体是如何生成的呢？</p><p>我们先从 JWT 说起，一个 JWT 包含以下 3 个部分：</p><ul><li>header（消息头）</li><li>payload（消息体，储存用户 id、用户角色等） + 过期时间（可选）</li><li>signature（签名）</li></ul><p>我们说过，JWT 就是 JSON 格式的数据，JWT 的前两个部分就是 JSON 数据，第三部分 signature 是基于前两部分 header 和 payload 生成的签名。前两部分分别通过 Base64URL 算法生成两组字符串，再和 signature 结合，三部分通过 . 号分割，就是最终的 token。</p><p>更多这方面的信息，大家可以参考：</p><ul><li><a href="https://medium.com/vandium-software/5-easy-steps-to-understanding-json-web-tokens-jwt-1164c0adfcec" target="_blank" rel="noreferrer">5 Easy Steps to Understanding JSON Web Tokens (JWT)</a></li><li><a href="https://www.jianshu.com/p/8f7009456abc" target="_blank" rel="noreferrer">Bearer Token</a></li><li><a href="https://www.cnblogs.com/XiongMaoMengNan/p/6785155.html" target="_blank" rel="noreferrer">OAuth 2.0: Bearer Token Usage</a></li></ul><p>正常来讲，当客户端在提交用户名/密码（或者其他方式）通过认证后，会获得 JWT 的 token，接着通过 JavaScript 脚本，对于所有数据请求都在其 HTTP header 中加上这个 JWT 的 token。服务端接到请求之后，验证 token 的 signature 是否等同于 payload，进而得知 payload 字段是否被中间人更改。</p><p>细心的读者可能会发现，我们提到“通过 JavaScript 脚本，对于所有数据请求，都在 HTTP header 中加上这个 token”。这就涉及 客户端如何存储和维护 JWT 的问题了。</p><p>存储 JWT，我们可以考虑：</p><ul><li>内存存储</li><li>local/session cookie</li><li>local/session storage……</li></ul><p>这几种方式。我并不建议开发者将 token 存储在 local storage 当中，因为：</p><ul><li>当用户关掉浏览器后，JWT 仍然会被存储在 local storage 中，即便 JWT 过期，可能一直被存储（除非手动更新或清理）</li><li>任何 JavaScript 都能轻而易举地获得 local storage 的内容</li><li>无法被 web worker 使用</li></ul><p>但在实际项目中，笔者也在 localstorage 中存储过 JWT，这需要我们分清利弊，结合实际场景选择方案。如果吃透概念，就能减少 bug 的出现，具体存储方案可以灵活一些。</p><p>更好的选择之一是将 JWT 存储在 session cookie 中，auth0 有一篇很好的文章，感兴趣的读者可以参考：<a href="https://auth0.com/docs/security/store-tokens" target="_blank" rel="noreferrer">Where to Store Tokens</a>。</p><h3 id="jwt-隐患" tabindex="-1">JWT 隐患 <a class="header-anchor" href="#jwt-隐患" aria-label="Permalink to &quot;JWT 隐患&quot;">​</a></h3><p>JWT 实现鉴权也存在的隐患，上面我们也简要提到了，隐患主要来自 XSS。攻击者可以主动注入恶意脚本或者使用用户输入，通过 JavaScript 代码来偷取 token，接下来便能通过 token 冒充受害用户。</p><p>比如，一个博客留言系统，用户可以在其留言内容中加入以下脚本：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#FDAEB7;font-style:italic;">=x</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onerror</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&amp;#0000106&amp;#0000097&amp;#0000118&amp;#0000097&amp;#0000115&amp;#0000099&amp;#0000114&amp;#0000105&amp;#0000112&amp;#0000116&amp;#0000058&amp;#0000097&amp;#0000108&amp;#0000101&amp;#0000114&amp;#0000116&amp;#0000040&amp;#0000039&amp;#0000088&amp;#0000083&amp;#0000083&amp;#0000039&amp;#0000041&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#B31D28;font-style:italic;">=x</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onerror</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&amp;#0000106&amp;#0000097&amp;#0000118&amp;#0000097&amp;#0000115&amp;#0000099&amp;#0000114&amp;#0000105&amp;#0000112&amp;#0000116&amp;#0000058&amp;#0000097&amp;#0000108&amp;#0000101&amp;#0000114&amp;#0000116&amp;#0000040&amp;#0000039&amp;#0000088&amp;#0000083&amp;#0000083&amp;#0000039&amp;#0000041&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>一般的防御手段是采用 HTML 转义来控制过滤用户输入（为了防止 XSS 攻击，常常需要将用户输入的特殊字符进行转义）。</p><h2 id="采用-authentication-cookie-实现鉴权" tabindex="-1">采用 Authentication cookie 实现鉴权 <a class="header-anchor" href="#采用-authentication-cookie-实现鉴权" aria-label="Permalink to &quot;采用 Authentication cookie 实现鉴权&quot;">​</a></h2><p>cookie 是含有有效期和相关 domain，存储在浏览器中的键值对组合，可以由 JavaScript 创建：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.cookie </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ‘my_cookie_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">my_cookie_value’</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.cookie </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ‘my_cookie_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">my_cookie_value’</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>也可以由服务端通过 response header 创建：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Set</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">Cookie</span><span style="color:#E1E4E8;">: my_cookie_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">my_cookie_value</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Set</span><span style="color:#D73A49;">-</span><span style="color:#6F42C1;">Cookie</span><span style="color:#24292E;">: my_cookie_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">my_cookie_value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>浏览器会自动在每个请求当中加入相关 domain 下的 cookie：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">GET</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">https</span><span style="color:#E1E4E8;">:</span><span style="color:#6A737D;">//www.example.com/api/users</span></span>
<span class="line"><span style="color:#B392F0;">Cookie</span><span style="color:#E1E4E8;">: my_cookie_name</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">my_cookie_value</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">GET</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">https</span><span style="color:#24292E;">:</span><span style="color:#6A737D;">//www.example.com/api/users</span></span>
<span class="line"><span style="color:#6F42C1;">Cookie</span><span style="color:#24292E;">: my_cookie_name</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">my_cookie_value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>cookie 一般分为两种（出处）：</p><ul><li>Session cookie，这种 cookie 会随着用户关闭浏览器而被清除，不会被标记任何过期时间 Expires 或者最大时限 Max- Age。</li><li>Permanent cookie，与 session cookie 相反，会在用户关闭浏览器之后被浏览器持久化存储。</li></ul><p>同时，服务端可以对 cookie 进行一些关键配置，以保障 cookie 的使用安全，诸如：</p><ul><li>HttpOnly cookie：浏览器端 JavaScript 没有读 cookie 权限。</li><li>Secure cookie：传输链路只有在特定安全通道（通常指 HTTPS），请求才会自动加入相关 cookie。</li><li>SameSite cookie：在跨域情况下，相关 cookie 无法被请求携带，这里主要是为了防止 CSRF 攻击。</li></ul><p>一个经典场景就是使用 cookie 存储一个 session ID（session ID 由服务端管理，进行创建和计时，以便在必要的时候清除）。通过验证 cookie 和 session ID，服务端便能标记一个用户的访问信息。这种情况就是我们说的 stateful，而本节课的主角 JWT 是 stateless 的，因为它不需要服务端维护 session ID，是无状态的，更加利于横向扩展。</p><h3 id="authentication-cookie-隐患" tabindex="-1">Authentication cookie 隐患 <a class="header-anchor" href="#authentication-cookie-隐患" aria-label="Permalink to &quot;Authentication cookie 隐患&quot;">​</a></h3><p>采用 Authentication cookie 实现单页应用鉴权的安全隐患主要有两种：</p><ul><li><a href="https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)" target="_blank" rel="noreferrer">XSS</a> 如果没有使用 httpOnly 选项，那么攻击者可能会通过注入恶意脚本，任意读取用户 cookie。而 cookie 直接存储了用户的身份认证信息，这当然是非常可怕的。</li><li><a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)" target="_blank" rel="noreferrer">CSRF</a> 是常见的针对 cookie 展开进攻的手段。我们知道跨域访问技术（CORS，跨域资源共享）的同源策略能保证不同源的客户端脚本在没有明确授权的情况下，无法读写对方资源。同源策略只是针对浏览器侧的编程脚本语言，如果我们对另一个恶意服务器发送 AJAX 请求，同源策略会有所限制，但是如果请求直接通过 HTML form 发送，那么同源策略毫无办法。</li></ul><p>另一个利用 CSRF 实施攻击的场景为：假如受害者在网页中登录了 Facebook，同时又打开了 bad.com，bad.com 属于攻击者的网站，这个网站中有这样的代码：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">img</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;https://facebook.com/postComment?userId=dupont_123&amp;comment=I_VE_BEEN_HACKED&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">img</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;https://facebook.com/postComment?userId=dupont_123&amp;comment=I_VE_BEEN_HACKED&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如此一来，攻击者网站的代码请求了 Facebook 发送个人状态的接口（<a href="https://facebook.com/postComment?%EF%BC%89%EF%BC%8C%E8%AF%A5%E5%8F%97%E5%AE%B3%E8%80%85%E4%BC%9A%E8%8E%AB%E5%90%8D%E5%85%B6%E5%A6%99%E5%9C%B0%E5%8F%91%E9%80%81%E4%B8%80%E4%B8%AA%E7%8A%B6%E6%80%81%EF%BC%8C%E5%86%85%E5%AE%B9%E4%B8%BA" target="_blank" rel="noreferrer">https://facebook.com/postComment?），该受害者会莫名其妙地发送一个状态，内容为</a> &quot;I_VE_BEEN_HACKED&quot;。</p><p>总结 为了防御 XSS 攻击，需要开发者设置 httpOnly 选项；为了防御 XSRF，需要开发者设置 SameSite 选项。需要注意，并不是所有浏览器都支持 <a href="https://caniuse.com/#feat=same-site-cookie-%20attribute" target="_blank" rel="noreferrer">SameSite</a>。</p><p>此外，一些其他防御手段有：</p><ul><li>Short session timeout：设置 session 过期时间，比如银行网站往往需要每 10 分钟或者更短时间就重新登录。 关键操作需要用户重新进行鉴权认证。</li><li>Double submitted cookie：当用户浏览一个站点时，服务端生成一个伪随机数 pseudorandom value，并将其设置为 cookie，且不设置 httpOnly 标识。这样 JavaScript 就能够访问这个 pseudorandom value，并要求在提交每个表单时，一并将这个 pseudorandom value 作为 form value 提交上来，同时在 cookie 中也要提交 value。服务端便可以对比 form value 中的 pseudorandom value 和 cookie value 是否一致，以此来认证用户的安全身份。</li></ul><p>Double submitted cookie 之所以能有效防范攻击，是因为同源策略致使攻击者无法读取来自攻击目标服务端的 cookie 值，更无法修改攻击网站的 cookie value。即便攻击者可以从 form 中提交任何 form value，但是无法通过服务端对 form value 中的 pseudorandom value 和 cookie value 的一致性进行验证。</p><h2 id="混合-jwt-和-cookie-进行鉴权" tabindex="-1">混合 JWT 和 cookie 进行鉴权 <a class="header-anchor" href="#混合-jwt-和-cookie-进行鉴权" aria-label="Permalink to &quot;混合 JWT 和 cookie 进行鉴权&quot;">​</a></h2><p>设想我们要实现这样一个鉴权系统：</p><ul><li>尽可能抵御 XSS 和 CSRF</li><li>做到 stateless</li></ul><p>考虑到安全性能，JWT 方案的主要问题在于攻击者存在直接读取 JWT 信息的可能。 如果我们将 JWT 和 cookie 方案结合呢 ？即将 JWT 部分敏感信息放入 cookie 当中，这样一来，便可以结合前文两种方式的优点。</p><p>如图，我们再总结一下存在的三种交互可能。第一种是经典 JWT 方式：</p><p><img src="`+p+'" alt=""></p><p>这种情况下，前后端使用 JWT 进行鉴权交互，前端通过 JavaScript 操作 JWT 信息完成请求准备。</p><p>第二种方式，将 JWT 信息在 session cookie 中维护：</p><p><img src="'+r+'" alt=""></p><p>在这种情况下，JWT 信息全部存储在 cookie 中， 并设置 cookie 的 httpOnly、SameSite、Secure 属性，前端无法读取 JWT 信息，但每次请求都会由浏览器带上必要的 JWT 数据（作为 cookie）。同时，由于采用 session cookie，也不存在 JWT 信息过期的情况，用户关闭页面之后不会将 JWT 信息持久化存储，下次再打开页面时，会重新进行鉴权流程。</p><p>第一种方式有一定的安全隐患；第二种方式我们将 JWT 所有信息存储在 session cookie 当中，优点明显，但是无法做到持久化存储，在某种程度上也会带来不便。那么我们权衡之后进行了变通，结合前面两种方式产生了第三种方式：</p><p><img src="'+t+'" alt=""></p><p>这样，JWT 的 signature 部分维护在设置了 httpOnly 的 cookie 中，这意味着 JavaScript 无法读取完整的 JWT 信息。同时，cookie 会在每次请求中被携带， 并由服务端返回后在浏览器中进行存储，这样 JWT 信息在每次请求时都可以被更新，JWT 过期时间也会被自动加入。</p><p>这篇文章：<a href="https://medium.com/lightrail/getting-token-authentication-right-%20in-a-stateless-single-page-application-57d0c6474e3" target="_blank" rel="noreferrer">Getting Token Authentication Right in a Stateless Single Page Application</a> 就很好地对上述方式进行了总结。</p><p>为了实现最大限度的安全保障，我们也可以考虑结合前文介绍的 Double submitted cookie 以及“关键操作需要用户重新进行鉴权认证”的处理。 例如，我们认为用户更改邮箱地址，是一个关键操作。那么，在发生这个操作时，即便用户已经登录，系统还是要求用户重新填写用户密码，以确认修改。后端在收到修改请求后，产生一个随机 number（经过加密运算），作为 permanent cookie 返回给前端，JavaScript 需要读取这个值，并将这个随机 number 作为表单 form value 的一项，它需要随新的邮箱地址一起提交，服务端对这个随机 form value 进行验证，验证方式是对比表单中的 form value 和 cookie 当中的随机 number 是否一致。</p><p>这样便更大限度地防御了 CSRF 攻击，流程如下：</p><p><img src="'+i+'" alt=""></p><p>我们总结一下流程。</p><ul><li>Step 1：单页应用检查 cookie 中是否存在 JWT payload，如果存在，表示用户已经成功进行鉴权；反之，重定向到类似 /login 的登录页面。</li><li>Step2：用户在未授权的情况下，在登录页面 /login 将用户名和密码提交给服务端，服务端返回信息中设置 authentication cookie，cookie 中含有 JWT 信息。</li></ul><p>第二步的具体操作方法可以采用上述第二种和第三种方式，或者增强 CSRF 防御的其他手段。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>我们再来总结一下单页应用进行鉴权的关键问题：token 最初由服务端下发，前端在请求时需要携带。这样一来：</p><ul><li>如果前端将 JWT 存储在 localStorage 或者 sessionStorage 当中，由于 localStorage 或者 sessionStorage 都可以被 JavaScript 访问，如果攻击者能够读取 localStorage 或者 sessionStorage，那么就能轻易获取 token，很容易进行 XSS 攻击。</li><li>如果将 JWT 存储在 cookie 当中，我们就可以指定 cookie httpOnly 属性，来防止被 JavaScript 读取，也可以指定 secure 属性，来保证 JWT 信息只在 HTTPS 下被携带。但是这样容易遭到 CSRF 攻击，因此就出现了我们的增强方式。</li></ul><p>本节我们通过分析和设计单页应用鉴权方案，熟悉了 JWT 和传统 cookie- session。我们在介绍一些安全方面最佳实践的同时，覆盖了一些常见的攻击手段：XSS 和 CSRF 等。前端安全是一个庞大且复杂的课题，本节只是通过一个比较重要的话题带大家切入，要想全面熟悉前端安全，完全可以开一门新课了。虽然我的课程志不在此，不过下面我会根据相关安全话题，将我收藏的文章分享给大家。</p><h2 id="分享" tabindex="-1">分享 <a class="header-anchor" href="#分享" aria-label="Permalink to &quot;分享&quot;">​</a></h2><h3 id="https-相关" tabindex="-1">HTTPS 相关 <a class="header-anchor" href="#https-相关" aria-label="Permalink to &quot;HTTPS 相关&quot;">​</a></h3><ul><li><a href="https://mp.weixin.qq.com/s/--KxUNzmBdKtOPBbovWCaA" target="_blank" rel="noreferrer">https 连接的前几毫秒发生了什么</a></li><li><a href="https://juejin.im/post/5c441073e51d455226654d60" target="_blank" rel="noreferrer">完全图解 HTTPS</a></li><li><a href="https://juejin.im/post/5b5f1289e51d4519601aeeda" target="_blank" rel="noreferrer">更安全的 Web 通信 HTTPS</a></li><li><a href="https://www.infoq.cn/article/a-cartoon-intro-to-dns-over-https" target="_blank" rel="noreferrer">图解基于 HTTPS 的 DNS</a></li><li><a href="https://juejin.im/post/5b0274ac6fb9a07aaa118f49?utm_medium=fe&amp;utm_source=weixinqun" target="_blank" rel="noreferrer">看图学 HTTPS</a></li><li><a href="https://juejin.im/post/5af3e002f265da0b7c074ada" target="_blank" rel="noreferrer">http 与 https 的区别我真的知道吗</a></li><li><a href="https://zhuanlan.zhihu.com/p/22142170" target="_blank" rel="noreferrer">深入揭秘 HTTPS 安全问题&amp;连接建立全过程</a></li><li><a href="http://support.upyun.com/hc/kb/article/1031843/" target="_blank" rel="noreferrer">HTTPS系列干货（一）：HTTPS 原理详解</a></li><li><a href="http://support.upyun.com/hc/kb/article/1031843/https://juejin.im/post/58a8f3295c497d005fbd58b1" target="_blank" rel="noreferrer">HTTPS 为什么更安全，先看这些</a></li></ul><h3 id="攻防" tabindex="-1">攻防 <a class="header-anchor" href="#攻防" aria-label="Permalink to &quot;攻防&quot;">​</a></h3><ul><li><a href="https://juejin.im/entry/58481d33128fe100579cb8c5" target="_blank" rel="noreferrer">Web 前端攻防，一不小心就中招了</a></li><li><a href="https://segmentfault.com/a/1190000006672214" target="_blank" rel="noreferrer">聊一聊 WEB 前端安全那些事儿</a></li><li><a href="https://zoumiaojiang.com/article/common-web-security/" target="_blank" rel="noreferrer">常见 Web 安全攻防总结</a></li><li><a href="http://www.guofengxian.com/2018/01/15/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E9%98%B2%E5%BE%A1%E6%8C%87%E5%8D%97/" target="_blank" rel="noreferrer">前端安全防御指南</a></li><li><a href="http://netsecurity.51cto.com/art/201407/446775.htm" target="_blank" rel="noreferrer">对于 XSS 和 CSRF 你究竟了解多少</a></li><li><a href="https://mp.weixin.qq.com/s/c_QTdLu6vsYcIiuPRZyjyA" target="_blank" rel="noreferrer">浅析前端安全之 XSS</a></li><li><a href="https://juejin.im/entry/5b461d866fb9a04fb745c256" target="_blank" rel="noreferrer">懂这些，你将能构建更安全的 Web 应用</a></li><li><a href="https://juejin.im/entry/5b4b56fd5188251b1a7b2ac1" target="_blank" rel="noreferrer">浅说 XSS 和 CSRF</a></li><li><a href="https://juejin.im/post/5b7bdfa1f265da437174ae0d" target="_blank" rel="noreferrer">快速找出网站中可能存在的 XSS 漏洞实践</a></li><li><a href="https://mp.weixin.qq.com/s/kWxnYcCTLAQp5CGFrw30mQ" target="_blank" rel="noreferrer">前端安全系列之一：如何防止 XSS 攻击？</a></li><li><a href="https://juejin.im/post/5bc009996fb9a05d0a055192" target="_blank" rel="noreferrer">前端安全系列之二：如何防止 CSRF 攻击？</a></li><li><a href="https://juejin.im/post/5bf214e151882579cf011c2a" target="_blank" rel="noreferrer">Web 安全漏洞之 XSS 攻击</a></li><li><a href="https://juejin.im/post/5c137f37f265da6133567735" target="_blank" rel="noreferrer">前端技术演进（三）：前端安全</a></li><li><a href="https://blog.codinghorror.com/preventing-csrf-and-xsrf-attacks/" target="_blank" rel="noreferrer">Preventing CSRF and XSRF Attacks</a></li></ul><h3 id="同源策略和跨域理论相关" tabindex="-1">同源策略和跨域理论相关 <a class="header-anchor" href="#同源策略和跨域理论相关" aria-label="Permalink to &quot;同源策略和跨域理论相关&quot;">​</a></h3><ul><li><a href="http://blog.w2fzu.com/2018/03/10/2018-04-02-same-origin/" target="_blank" rel="noreferrer">跨域与同源策略探究</a></li><li><a href="https://www.cnblogs.com/yincheng/p/cross-domain.html" target="_blank" rel="noreferrer">同源策略和跨域请求研究</a></li><li><a href="https://segmentfault.com/q/1010000011535675/a-1020000011537760" target="_blank" rel="noreferrer">为什么提交表单不受同源政策限制</a></li><li><a href="https://juejin.im/post/5ab21717518825611a405da3" target="_blank" rel="noreferrer">跨域资源共享 CORS 一些知识点</a></li><li><a href="https://juejin.im/entry/5b82b5e56fb9a01a02311b27" target="_blank" rel="noreferrer">Content Security Policy (CSP) 介绍</a></li><li><a href="https://juejin.im/post/5b7e826ee51d4538b35c04e8" target="_blank" rel="noreferrer">30 分钟理解 CORB 是什么</a></li><li><a href="https://mp.weixin.qq.com/s/T5gM7M9WsRMSxXzZPDagcA" target="_blank" rel="noreferrer">不要再问我跨域的问题了</a></li></ul><h3 id="鉴权" tabindex="-1">鉴权 <a class="header-anchor" href="#鉴权" aria-label="Permalink to &quot;鉴权&quot;">​</a></h3><ul><li><a href="https://www.jianshu.com/p/af8360b83a9f" target="_blank" rel="noreferrer">讲真，别再使用 JWT 了！</a></li><li><a href="https://blog.csdn.net/hxg117/article/details/76954606" target="_blank" rel="noreferrer">JWT Token 存储在 Cookie 还是 Web Storage</a></li><li><a href="https://medium.com/lightrail/getting-token-authentication-right-in-a-stateless-single-page-application-57d0c6474e3" target="_blank" rel="noreferrer">Getting Token Authentication Right in a Stateless Single Page Application</a></li><li><a href="https://juejin.im/entry/58a298f4128fe100582bf5c1" target="_blank" rel="noreferrer">登录那些事儿</a></li><li><a href="https://juejin.im/entry/58a3d6f561ff4b006c875ee1" target="_blank" rel="noreferrer">登录工程：现代 Web 应用的典型身份验证需求</a></li><li><a href="https://blog.csdn.net/wang839305939/article/details/78713124" target="_blank" rel="noreferrer">前后端常见的几种鉴权方式</a></li><li><a href="https://juejin.im/post/5b73c71fe51d45666016655a" target="_blank" rel="noreferrer">前端关于单点登录的知识</a></li><li><a href="https://juejin.im/post/5af5711e5188254267261e3b" target="_blank" rel="noreferrer">如何加密传输和存储用户密码</a></li><li><a href="https://mp.weixin.qq.com/s/G_Grk8YTlu9-0WDZP85xAg" target="_blank" rel="noreferrer">Web 登录其实没那么简单</a></li></ul><h3 id="cdn-劫持和其他安全问题" tabindex="-1">CDN 劫持和其他安全问题 <a class="header-anchor" href="#cdn-劫持和其他安全问题" aria-label="Permalink to &quot;CDN 劫持和其他安全问题&quot;">​</a></h3><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;mid=2651227961&amp;idx=1&amp;sn=d4eb72b910281a18fc35581e0e39096f&amp;chksm=bd495ebd8a3ed7ab2dcc8d6bbfdd6f336f5b80a301cd3e7f92f56bdd3c95c749d9d6fd77282f&amp;mpshare=1&amp;scene=1&amp;srcid=0310vrk1VnUROjJY9XZ51Hoc" target="_blank" rel="noreferrer">危险的 target=&quot;_blank&quot; 与 “opener”</a></li><li><a href="https://zhuanlan.zhihu.com/p/40682772" target="_blank" rel="noreferrer">浅谈流量劫持与防治</a></li><li><a href="https://security.tencent.com/index.php/blog/msg/126" target="_blank" rel="noreferrer">短网址安全浅谈</a></li><li><a href="https://juejin.im/post/5c355a816fb9a049a42f3ac8" target="_blank" rel="noreferrer">使用 SRI 解决 CDN 劫持</a></li><li><a href="https://mp.weixin.qq.com/s/gVLXJO0IXol4q_ademXMWg" target="_blank" rel="noreferrer">了解下 DDoS 攻击方式</a></li><li><a href="https://mp.weixin.qq.com/s/govRdwkNTEBJ1NJ1ipA40w?add=add" target="_blank" rel="noreferrer">主流浏览器图片反防盗链方法总结</a></li></ul>',114),y=[h];function E(u,d,m,b,k,f){return s(),e("div",null,y)}const S=a(c,[["render",E]]);export{_ as __pageData,S as default};
