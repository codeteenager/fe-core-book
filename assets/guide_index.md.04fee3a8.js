import{_ as a,o as e,c as l,Q as i}from"./chunks/framework.9509352d.js";const t="/fe-core-book/images/1.png",S=JSON.parse('{"title":"开篇词：如何突破前端开发技术瓶颈","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md","lastUpdated":1699201791000}'),p={name:"guide/index.md"},o=i('<h1 id="开篇词-如何突破前端开发技术瓶颈" tabindex="-1">开篇词：如何突破前端开发技术瓶颈 <a class="header-anchor" href="#开篇词-如何突破前端开发技术瓶颈" aria-label="Permalink to &quot;开篇词：如何突破前端开发技术瓶颈&quot;">​</a></h1><p>让我们一起来讨论下：当前端工程师需要进阶时，我们学些什么。</p><h2 id="直面自我——前端工程师的焦虑和迷茫" tabindex="-1">直面自我——前端工程师的焦虑和迷茫 <a class="header-anchor" href="#直面自我——前端工程师的焦虑和迷茫" aria-label="Permalink to &quot;直面自我——前端工程师的焦虑和迷茫&quot;">​</a></h2><p>说到进阶，我想先谈谈我们每个人内心的焦虑和迷茫，正视这种情绪是学习的第一步。对于每一个追求进步的人来说，瓶颈期总会在各个阶段“如约而至”。早在公元前某年，庄子就说过：</p><blockquote><p>吾生也有涯，而知也无涯。以有涯随无涯，殆已！已而为知者，殆而已矣！</p></blockquote><p>而现如今，信息爆炸时代，信息量呈几何级数增长，知识似乎唾手可得。那么“该学什么？”，“到底该怎么学？”，“学完之后又该做什么？”，大部分人都会在知识面前焦虑、迷茫。</p><p>同样地，对于有一定工作经验的工程师来说：</p><ul><li>我该如何避免相似的工作做三年，而不是具备了三年的工作经验？</li><li>我该如何从繁杂而千篇一律的业务需求中提炼技术点并总结提高？</li><li>我该如何为团队带来更大的价值，体现经验能力？</li></ul><p>这些困扰对前端工程师来说貌似来得更加猛烈：前端技术发展备受瞩目，前端工程师变得越发重要的背后是相关技术的不断扩张和更新换代。因此，我们比以往任何时候都更需要主动学习。但据我观察，目前网络上的学习资料往往存在以下两个问题：</p><ul><li>过于碎片化，这类知识某种程度上只能成为缓解焦虑的精神鸦片</li><li>追求短平快，大牛经验、快速搞定“面经题目”，渐渐演变成为跳槽加薪的兴奋剂</li></ul><p>前端学习，尤其是进阶阶段的学习是一个系统曲折的过程。每个学习者所接触的知识内容和其背后的原理构建成了他的思维方式。短期速成的内容或者大量碎片化的知识很难帮助我们深度思考。坦白来说，我也是这些“学习资料”的搜集者，如果没有系统针对性地学习和反复的刻意练习，那么结果就是以为收藏的是知识，其实收藏的是“知道”。以为掌握了知识，其实只是囤积了一堆“知道”。</p><h2 id="专栏简介——8-部分-36-个主题-50-课" tabindex="-1">专栏简介——8 部分 36 个主题 50 课 <a class="header-anchor" href="#专栏简介——8-部分-36-个主题-50-课" aria-label="Permalink to &quot;专栏简介——8 部分 36 个主题 50 课&quot;">​</a></h2><ul><li>第一部分：JavaScript 基础强化（第 1-1~1-6 课）</li><li>第二部分 JavaScript 语言进阶（第 2-1~2-6 课）</li><li>第三部分 不可忽视的 HTML 和 CSS（第 3-1~3-3 课）</li></ul><p>其中前三部分介绍 JavaScript、 HTML、CSS ，对于一些热点、重点话题，比如“this 指向”、“闭包、作用域、执行上下文”，以及一些高频考察点进行了深入分析；对面向对象、原型与原型链、异步这些内容进行强化，从实现的角度，结合具体实例分析 Promise；结合 ES Next，从 ES 的发展来看语言的演进。</p><ul><li>第四部分 前端框架（第 4-1~4-7 课）</li></ul><p>接下来进入了前端框架部分，我们以 React 为主，分析框架对前端到底意味着什么，以及我们应该如何学习 React。事实上，对 React 的学习，不能只停留在“会用”的层面，其设计原理和思想演进，对于培养编程思维非常有益，也有利于学习者能从更高的角度看待问题。</p><ul><li>第五部分 前端工程化（第 5-1~5-8 课）</li></ul><p>资深程序员永远逃不开的工作之一就是“基础构建”、“项目架构”。前端工程化部分我们从代码组织谈起，从规范实施谈起，结合 webpack、Lerna 等工具，为大家还原一个真实的“基建”场景，共同探索学习。</p><ul><li>第六部分 性能优化（第 6-1~6-6 课）</li></ul><p>性能优化是理论和实践相结合的重要话题。</p><p>我们需要大量理论知识：明白缓存策略，了解浏览器渲染特点，清楚 JavaScript 异步单线程对性能意味着什么，还要了解网络传输知识，等等。我们也需要大量实践经验：用得了 Chrome Devtool 分析火焰图，跑得出准确的 benchmark，知道防抖和节流的区别，懂得资源合并、拆分的利弊，了解业界最新性能优化方案，等等。</p><p>这一部分，我们除了介绍重要大量知识点外，也会结合代码/项目实例来展开。</p><ul><li>第七部分 编程思维和算法（第 7-1~7-8 课）</li></ul><p>前端开发离不开编程基础，培养良好的编程思维，了解基本的算法知识，是每一个工程师所必须具备的。在这一部分，我们用 JavaScript 来描述多种设计模式，设计模式并不是纸上谈兵，实实在在地存在于我们的业务代码当中；手把手带大家用 JavaScript 处理各种数据，说到底前端还是处理数据，展示 UI；当然更少不了对一些常见算法的强化。</p><ul><li>第八部分 网络知识（第 8-1~8-5 课）</li></ul><p>作为一名前端开发者，不了解互联网传输的奥秘，不清楚网络细节是难以进阶的。网络知识关联着性能优化、前后端协作等核心环节，因此这一部分我们将重点强化网络基础。</p><ul><li>结束语：软技巧</li></ul><p>学习进步离不开社区的力量，“授人予鱼不如授人予渔”。在课程的最后，我会讲述我的学习方法：如何投身到社区当中，与广大开发者一起讨论；如何阅读前人的经典思想，站在巨人的肩上看得更远；如何解读开源库，从中汲取养分；如何在面试和述职当中，正确地表达汇报……</p><p><img src="'+t+'" alt=""></p>',29),r=[o];function c(n,s,u,d,_,h){return e(),l("div",null,r)}const f=a(p,[["render",c]]);export{S as __pageData,f as default};
